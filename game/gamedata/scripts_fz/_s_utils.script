--[[ ------------------------------------------------------------------------------------------------
 File       : _s_utils.script
 Description: Вспомогательные функции
 Copyright  : 2012-2014 © FrostyTech
 Author     : Viнt@rь   
 Last edit  : 03.06.2018
--]] ------------------------------------------------------------------------------------------------
--/											Variables
--]] ------------------------------------------------------------------------------------------------
--]] ------------------------------------------------------------------------------------------------
--/											Functions
--]] ------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 				Функции обработки перменных
--]]---------------------------------------------------------------
--[[
--	Сохранить переменную
--	@param	string		variable_name	имя переменной
--	@param				value			значение переменной
--]]
function WriteVariable(variable_name, value)
	if value ~= nil then
		_s_storage.storage[variable_name] = value
	end
end

--[[
--	Загрузить переменную
--	@param	string		variable_name	имя переменной
--	@param				default_value	дефолтное значение
--	@return
--]]
function ReadVariable(variable_name, default_value)
	if _s_storage.storage[variable_name] ~= nil then
		return _s_storage.storage[variable_name]
	end
	return default_value
end

--[[
--	Удалить переменную
--	@param	string	variable_name	имя переменной
--]]
function DeleteVariable(variable_name)
	if _s_storage.storage[variable_name] then
		_s_storage.storage[variable_name] = nil
	end
end
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 						Строки
--]]---------------------------------------------------------------
--[[
--	По айди указаной строки транслитит ее
--	@param	string	sId	айди строки 
--]]
function GetString(id)
	if not id then return "" end
	return game.translate_string(id)
end

--[[
--	разбивает сроку по разделителю
--	@param	string	string 	строка
--	@param	string	divider	разделитель
--	@param	boolean	trim	обрезать пробелы
--	@return strings
--]]
function SplitString(string, divider, trim) -- TODO implemented in engine
	local strings = {}
	local pattern
	if divider and type(divider) == 'string' then -- если divider задан разделяем по нему
		pattern = '%s*([^' .. divider .. ']+)%s*' --/'[^%s%'..divider..']+'
	else -- разделяем слова
		pattern = '[%w%_]+'
	end
	for value in string:gmatch(pattern) do
		table.insert(strings, (not trim and value) or value:trim())
	end
	return strings
end

--[[
--	разделяет строку на строки заданной длины(iLen)
--	@param	string	string 	строка
--	@param	integer	length 	длина строки
--	@param	string	divider разделитель
--	@param	boolean	trim 	обрезать пробелы
--	@return strings
--]]
function SplitStringByLength(string, length, divider, trim)
	if type(length) ~= 'number' then length = 1 end
	if type(divider) ~= 'string' then divider = " " end
	
	local strings = {}
	local divider_length = divider:len()
	string = string or ""
  
  	-- субцикл выделения одной строки заданной длины
	local GetDividerPosition = function()
		if string:len() > length then
			local divider_position = string:find(divider, 1, true)
			local position = divider_position
			while divider_position and divider_position <= length + 1 do
				position = divider_position
				divider_position = string:find(divider, divider_position + divider_length, true)
			end
			return position
		end
		return nil
	end
  
	-- основной(общий) цикл разделения исходной строки на строки заданной длины
	local position = GetDividerPosition()
	while position do
		local line = string:sub(1, position - 1)
		string = string:sub(position + divider_length)
		table.insert(strings, (not trim and line) or line:trim())
		position = GetDividerPosition()
	end
	-- остаток
	if string ~= "" and string ~= divider then
		table.insert(strings, (not transfer_item and string) or string:match('^%s*(.*%S)'))
	end
	-- возвращаем таблицу со строками заданной длины
	return strings
end

--[[
--	обрезает пробельные символы в начале и в конце строки
--	@param	string	string  строка
--	@return string
--]]
function TrimLine(string)
	if string and string ~= '' then
		return string:match('^%s*(.*%S)') or ''
	end
	return string or ''
end

--[[
--	Начальная часть строки (до первого пробела) без пробелов
--	@param	string	string  строка
--	@return string
--]]
function TrimWord(string)
	if string and string ~= '' then
		return string:match('%S+')
	end
	return string
end

--[[
--	перевод строки в булевное значение (true/false)
--	@param	string	string строка
--	@return boolen
--]]
function toboolean(string)
	return (string == "1" or string.lower(string:match('(%S*)')) == "true")
end
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 						Таблици
--]]---------------------------------------------------------------
--[[
--	Получает реальный размер таблицы
--	@param	table	table	таблица
--	@return integer
--]]
function GetTableSize(table)
	if IsTableList(table) then
		return #table
	end
	local size = 0
	for k, v in pairs(table) do
		size = size + 1
	end
	return size
end

--[[
--	Проверка типа таблицы 'список' или нет?
--	@param	table	table	таблица
--	@return boolean
--]]
function IsTableList(table)
	local list = false
	local count_index = #table
	if count_index > 0 then
		if next(table) == 1 and not next(table, count_index) then
			for i = 2, count_index - 1 do
				if not table[i] then
					return false
				end
			end
			list = true
		end
	end
	return list
end
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 						Числа
--]]---------------------------------------------------------------
--[[
--	Округление заданного числа до указанного кол-ва символов после запятой
--	@param	number	number	округляемое значение
--	@param	number	dp		кол-во символов после запятой
--	@return number
--]]
function Round(number, dp)
  local mult = 10 ^ (dp or 0)
  return math.floor(number * mult + 0.5) / mult
end

function boolean2number(value)
	return value and 1 or 0
end
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 				Функции обработки мап-спотов
--]]---------------------------------------------------------------
--[[
-- 	Проверить, стоит ли метка на обьекте.
-- 	@param	integer	id			Айди обьекта на котором нужно проверить метку.
-- 	@param	string	spot_name 	Название(тега) метки.
-- 	@return	boolen  
--]]
function HasMapSpot(id, spot_name)
	return id and level.map_has_object_spot(id, spot_name) ~= 0
end

--[[
-- 	Повесить метку на указанный обьект.
-- 	@param	integer	id				Айди обьекта на который нужно влепить метку.
-- 	@param	string	spot_name		Название(тега) метки которую нужно поставить. Например - "red_location".
-- 	@param	string	text 			Текст метки.
-- 	@param	boolean	serializable	(Не)Постоянная метка.
--]]
function AddMapSpot(id, spot_name, text, serializable)
	if id and not HasMapSpot(id, spot_name) then
		text = text or ""
		if serializable then
			level.map_add_object_spot_ser(id, spot_name, text)
		else
			level.map_add_object_spot(id, spot_name, text)
		end
	end
end

--[[
-- 	Удаляет метку с обьекта.
-- 	@param	integer	id			Айди обьекта из которого нужно убрать метку.
-- 	@param	string	spot_name	Название(тега) метки который нужно убрать
--]]
function RemoveMapSpot(id, spot_name)
	if id and HasMapSpot(id, spot_name) then
		level.map_remove_object_spot(id, spot_name)
	end
end
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 				Функции спавна/удаления айтимов
--]]---------------------------------------------------------------
--[[
--	спавнит обьект на карту по указаным кординатам
--	@param	string	section			секция предмета
--	@param	integer	position		позиция(x,y,z)
--	@param	integer	level_vertex_id	позиция(level_vertex_id)
--	@param	integer	game_vertex_id	позиция(game_vertex_id)
--	@return	spawned object
--]]
function SpawnItem(section, position, level_vertex_id, game_vertex_id) 
	position = position or db.actor:position()
	level_vertex_id = level_vertex_id or db.actor:level_vertex_id()
	game_vertex_id = game_vertex_id or db.actor:game_vertex_id()
 	return alife():create(section, position, level_vertex_id, game_vertex_id)
end

--[[
--	спавнит обьект в инвентаре
--	@param	string	section	секция предмета
--	@param	string	npc		кому спавнить
--	@return	spawned object
--]]
function SpawnItemToInventory(section, npc)
	npc = npc or db.actor
	return alife():create(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
end

--[[
--	удаляет объект из игры
--	@param	string	obj	обьект
--	@return	boolean
--]]
function RemoveItem(obj)
	alife():release(alife():object(obj:id()), true)
end

--[[
--	удаляет предмет из инвентаря
--	@param	string	section	секция предмета
--	@param	string	npc		у кого удалять
--]]
function RemoveItemFromInventory(section, npc)
	npc = npc or db.actor
	alife():release(alife():object(npc:object(section):id()), true)
end

--[[
-- 	перенос вещей ГГ в ящик по его STORY ID
-- 	@param	story id box_story_id стори айди ящика.
--]]
function ReplaceInventoryToBox(box_story_id)
	local box = get_story_object(box_story_id)
	local function TransferItems(item)
		if item:section() ~= "wpn_binoc" and item:section() ~= "wpn_knife" and item:section() ~= "device_torch" then
			db.actor:transfer_item(item, box)
		end
	end
	db.actor:inventory_for_each(TransferItems)
end

--[[
-- 	Перенос вещей из ящика по его STORY ID в инвентарь ГГ
-- 	@param	story id box_story_id стори айди ящика.
--]]
function ReplaceBoxToInventory(box_story_id)
	local items = {}
	local box = get_story_object(box_story_id)
	local function TransferItems(dummy, item) 
			box:transfer_item(item, db.actor)
			local item_section = item:section()
			if not items[item_section] then
				items[item_section] = 0
			end
			if items[item_section] then
				items[item_section] = items[item_section] + 1
			end
		end
	box:iterate_inventory_box(TransferItems)
	for k,v in pairs(items) do
		news_manager.relocate_item(db.actor, "in", k, v)
	end
end
-----------------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 					Разные функции...
--]]---------------------------------------------------------------
--[[
--	Получает время в часах
--	Получает время в минутах
--	Получает время в секундах
--	@return	number
--]]
function GetGameHours()
	return level.get_time_days() * 24 + level.get_time_hours()
end
function GetGameMin()
	return level.get_time_days() * 60 * 24 + level.get_time_hours() * 60 + level.get_time_minutes()
end
function GetGameSec()
	return level.get_time_days() * 60 * 60 * 24 + level.get_time_hours() * 60 * 60 + level.get_time_minutes() * 60
end

--[[
-- 	Взорвать обьект по его айди
-- 	@param	object id айди обьекта
--]]
function Explode(id)
	if id then
		local obj = level.object_by_id(id)
		if obj then
			obj:explode(0)
		end
	end
end

--[[
--	Узнает отношение одного НПС к другому
--	@param	object	obj		объект 
--	@param	object	target	объект-цель, к которому узнается отношение
--	@return	string
--
--	@deprecated Use obj:relation(target) instead
--]]
function GetNpcRelation(obj, target)
	_log("~ GetNpcRelation deprecated use obj:relation(target) instead")

	local relation = obj:relation(target)
	if relation == game_object.neutral then 
  		return "neutral"
	elseif relation == game_object.friend then 
  		return "friend"
	elseif relation == game_object.enemy then 
  		return "enemy"
	end
end

--[[
--	по айди выдает задание актору
--	@param	string	task_id	айди задания
--]]
function GiveTask(task_id)
	if not task_id then return end
	task_manager.get_task_manager():give_task(task_id)
end

--[[
-- 	Получить дистанцию между обьектами.
-- 	@param	object	obj		Первый обьект.
-- 	@param	object	obj2	Второй обьект.
-- 	@return	integer
--]]
function DistanceBetween(obj, obj2)
	return obj:position():distance_to(obj2:position())
end

--[[
-- 	Получает функцию/обьект и его метод
-- 	@param	table/function	func таблица/функция
-- 	@return	function/userdata
--]]
function GetFunction(func)
	local function_type = type(func)
	if function_type == 'function' or function_type == 'userdata' then
		return func
	elseif function_type == 'table' and type(func.bind) == 'userdata' and type(func.func) == 'function' then
		return func.func, func.bind
	end
end

--[[
--	Получение разговаривающего нпс
--]]
function GetTalkingNpc()
	for k, v in pairs(db.storage) do
		local npc = v.object
		if npc then -- npc ~= nil
			if npc:is_talking() and npc:id() ~= db.actor:id() then
				return npc
			end
		end
	end
end

--[[---------------------------------------------------------------
--// 						Типсы(сообщения)
--]]---------------------------------------------------------------
local icons = {
	default		= "ui_iconsTotal_grouping",
	mutant		= "ui_iconsTotal_mutant",
	loc_info	= "ui_iconsTotal_locations",
	location	= "ui_inGame2_Mesta_evakuatsii",
	pda			= "ui_inGame2_PD_Torgovets_informatsiey",
	surge		= "ui_inGame2_Vibros",
  	glaz		= "ui_inGame2_PD_Otmecheniy_zonoy",
  	notebook	= "ui_inGame2_Lager_naemnikov",
  	money		= "ui_inGame2_Sdelka",
	lose_money	= "ui_inGame2_Dengi_otdani",
  	give_money 	= "ui_inGame2_Dengi_polucheni",
  	instrumenti	= "ui_inGame2_Instrumenti",
  	radiations	= "ui_inGame2_V_zone_nedavno_proshel_vibros",
  	pidori		= "ui_inGame2_Razgovor_s_glazu_na_glaz",
  	autoritet	= "ui_inGame2_PD_Lider",
  	skadovsk	= "ui_inGame2_Bezopasnoe_mesto",
  	boroda		= "ui_inGame2_Artefakti_na_zakaz",
  	sich		= "ui_inGame2_Zamanchiviy_biznes",
  	sultan		= "ui_inGame2_Naezd",
	kardan		= "ui_inGame2_Tri_tovarisha",
	actor		= "ui_inGame2_PD_Svoy_paren",
  	monolith	= "ui_inGame2_Vizhivshiy_monolit",
  	krovosos	= "ui_inGame2_Ohota_na_Krovososov",
  	chimer		= "ui_inGame2_Ohota_na_Himeru",
  	burer		= "ui_inGame2_Ohota_na_Burerov",
	
	sidor		= "ui_sms_sidor",
	wolf		= "ui_sms_wolf",
	kolyazin	= "ui_sms_colonel_kolyazin",
	goblin		= "ui_sms_wood_goblin",
	borland 	= "ui_sms_borland",
	logoped 	= "ui_sms_logoped",
	shaman		= "ui_sms_shaman",
	
	--news		= "ui_inGame2_PD_newsms"
}

--[[
-- 	показываем типс
--]]
function SendTip(text, header, time_out, time_show, icon, sound_type)
	if not text then return end
	
	header = header or GetString("st_tip")
	time_out = time_out or 0
	time_show = time_show or 5
  
	local sound
	if sound_type then
		if sound_type == 'news' then 
			sound = sound_object([[device\pda\pda_news]])
		elseif sound_type == 'task' then 
			sound = sound_object([[device\pda\pda_objective]])
  		else 
			sound = sound_object([[device\pda\pda_tip]])
  		end
  		--' Играем звук
  		sound:play(db.actor, time_out, sound_object.s2d)
  	end
  	
  	text = "%c[default]" .. text
  	icon = icons[icon] or icon or icons["default"]

	if db.actor and icon then
		db.actor:give_game_news(header, GetString(text), icon, time_out * 1000, time_show * 1000)
  	end
	return true
end
--[[------------------------------------------------------------------------------------------------
--/ extension classes functionality
--]]------------------------------------------------------------------------------------------------
--[[----------------------------------------------
--/ table extension
--]]----------------------------------------------
if not table.size then
	table.size = this.GetTableSize
end

if not table.isList then
	table.isList = this.IsTableList
end

if not table.print then
	table.print = _dbg and _dbg._print_table or function()end
end
--[[----------------------------------------------
--/ string extension
--]]----------------------------------------------
if not string.trim then
	string.trim = this.TrimLine
end

if not string.trim_w then
	string.trim_w = this.TrimWord
end

if not string.split then
	string.split = this.SplitString
end

if not string.splitbylen then
	string.splitbylength = this.SplitStringByLength
end
--[[----------------------------------------------
--/ math extension
--]]----------------------------------------------
if not math.round then
	math.round = this.Round
end
--[[-------------------------------------------------------------------------
--/ Интеграция синонимов функций из текущего скрипта в _g.script(tnx Artos)
--]]-------------------------------------------------------------------------
local exported
if not exported then
	local funcs = {
		["WriteVar"] 		   		= WriteVariable,
		["ReadVar"] 		   		= ReadVariable,
		["DeleteVar"] 		   		= DeleteVariable,
		--
		["HasMapSpot"] 		   		= HasMapSpot,
		["AddMapSpot"] 		   		= AddMapSpot,
		["RemoveMapSpot"] 	   		= RemoveMapSpot,
		--
		["SpawnItem"] 		   		= SpawnItem,
		["SpawnItemToInventory"]	= SpawnItemToInventory,
		["RemoveItem"] 		   		= RemoveItem,
		["RemoveItemFromInventory"]	= RemoveItemFromInventory,
		["ReplaceInventoryToBox"]  	= ReplaceInventoryToBox,
		["ReplaceBoxToInventory"] 	= ReplaceBoxToInventory,
		--
		["GetString"]				= GetString,
		["GetGameMin"] 		   		= GetGameMin,
		["GetGameSec"] 	 	   		= GetGameSec,
		["GetNpcRelation"]	   		= GetNpcRelation,
		["Explode"]		   			= Explode,
		["GiveTask"]		   		= GiveTask,
		["DistanceBetween"] 		= DistanceBetween,
		["GetFunction"]				= GetFunction,
		["GetTalkingNpc"]	   		= GetTalkingNpc,
		["SendTip"] 		   		= SendTip,
		["toboolean"] 		   		= toboolean,
		["boolean2number"]			= boolean2number,
		-- DBG ------------------------------------------------------------------
		["_log"]					= _dbg and _dbg._log or function()end,
		["_printf"]					= _dbg and _dbg._printf or function()end,
		["_abort"]					= _dbg and _dbg._abort or function()end,
		["_chek_save_load"]			= _dbg and _dbg._chek_save_load or function()end
		-- DBG ------------------------------------------------------------------
	}
	local module = _G
	setfenv(1, module)
	for k, v in pairs(funcs) do
		module[k] = v
		setfenv(module[k], module)
	end
	exported = true
end
--/--------------------------------------------------------------------------