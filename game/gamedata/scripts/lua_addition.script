--[[ ----------------------------------------------------------------------------------------------
 File       : lua_addition.script
 Description: "Дополнительные полезные функции"
 Copyright  : 2015 © Neof-One
 Author     : Stalker Community and Vampirnik77
 Editors    : Vampirnik77
 Last edit  : 15.07.2017 (by Vampirnik77)
--]] ----------------------------------------------------------------------------------------------
function _G.HaveArtefact() --/ Функция проверки наличия артефактов у ГГ
local bool = false
db.actor:inventory_for_each(function(item)
		if IsArt(item) then
			bool = true
		end
end)
return bool
end

function _G.run_gui(gui, close_inv) --/ Запуск Gui
	if close_inv then
		local hud = get_hud()
		hud:HideActorMenu()
		hud:HidePdaMenu()
		gui:ShowDialog(true) 
		level.show_weapon(false) 
	else 
		gui:ShowDialog(true) 
	end 
end 

function _G.IsArt(obj) --/ Артефакт ли?
local section = obj:section()
	if ReadINI(section,"class","string") == "ARTEFACT" or ReadINI(section,"class","string") == "SCRPTART" then
		return true
	else
		return false
	end
end



function _G.toBool(value) --/ Функция преобразование в булевые значения // Не работала в версии 0.0.3
	if tostring(value) == "nil" or tostring(value) == "false" then
		return false
	else
		return true
end
end


function _G.isBool(value) --/ Автор Desertir
    if type(value) == 'boolean' then
		return true
	else
		return false
	end
end

function _G.IsAnom (obj) --/ Аномалия ли? Кто автор не знаю.
local s = obj:section() 
return string.find(s, "zone_mine_electric_dinamic") 
end

function _G.give_object_to_actor(obj,count) --/Функция выдачи предмета актору. Автор FantomICW
     if count == nil then count = 1 end 
     for i=1, count do 
     alife():create(obj,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id()) 
     end 
end


function _G.release_actor_inventory(object_name, count) --/ Функция удаления предметов из инвентаря ГГ. Автор Samaber13
 local function release_object_item(item) 
    if item:section() == object_name and count > 0 then
	 local s_Item = item
     alife():release(alife():object(s_Item:id()), true)
     count = count - 1 
    end 
   end 
     db.actor:inventory_for_each(release_object_item) 
   end

function _G.HaveItem(section) --/ Функция проверяет наличие предмета
local bool = false
db.actor:inventory_for_each(function(item)
		if item:section() == section then
			bool = true
		end
end)
return bool
end

function _G.ReadINI(section,line,type_key,ini) --/ Функция чтения ini-файлов
local result = Get_CheckedFunc("module_ini.Read"..string.lower(type_key))(section,line,ini)
return result
end

--/Функции для работы с таблицами---------------------------------------------------------------------------------------------------------------
function _G.ExistFieldTbl(tbl, field) --/ Функция проверяет есть ли в таблице(tbl) определенное поле/элемент(field)
local bool = false
	for _, pole in pairs(tbl) do
		if pole == field then
			bool = true
		end
  end
return bool
end

function _G.RndElmTbl(tbl) --/ Функция возвращает рандомный элемент таблицы
	math.randomseed(device():time_global())
	local key_tbl = {}
	for key, val in pairs(tbl) do
		table.insert(key_tbl, key)
	end
	local rnd_key = key_tbl[math.random(1,#key_tbl)]
return tbl[rnd_key]
end

function _G.SizeTbl(tbl) --/Функция возвращает размер таблицы
local size = 0
	for key, val in pairs(tbl) do
		size = size + 1
	end
return size
end

function _G.MixTbl(tbl) --/ Функция перемешивает таблицу
math.randomseed (device():time_global())
local TblIndex = {}
	for key, val in pairs(tbl) do
		table.insert(TblIndex, key)
	end
	for i = #TblIndex, 1, -1 do
		local buffer = nil
		local RndIndex = math.random(1,i)
		buffer = tbl[TblIndex[i]]
		tbl[TblIndex[i]] = tbl[TblIndex[RndIndex]]
		tbl[TblIndex[RndIndex]] = buffer
	end
return tbl
end